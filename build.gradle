plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.10.3'
    id 'java'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

defaultTasks 'clean','test','build'
ext.rundeckPluginVersion = '1.2'
ext.pluginClassNames='com.bioraft.rundeck.rancher.RancherNodeExecutorPlugin,' +
'com.bioraft.rundeck.rancher.RancherFileCopier,' +
'com.bioraft.rundeck.rancher.RancherResourceModelSourceFactory,' +
'com.bioraft.rundeck.rancher.RancherUpgradeService,' +
'com.bioraft.rundeck.rancher.RancherNewStack,' +
'com.bioraft.rundeck.rancher.RancherAddService' +
'com.bioraft.rundeck.rancher.RancherManageService'
ext.pluginName = 'Rancher Node Plugins'
ext.pluginDescription = 'Interface with Rancher environments'

scmVersion {
    ignoreUncommittedChanges = true
    tag {
        // Ignore tags that begin with <prefix><versionSeparator>, include all tags
        // if prefix is empty.
        prefix = ''
        versionSeparator = ''

        // Append .0 to satisfy SemVer if the tag version is only X.Y
        def origDeserialize=deserialize
        deserialize = { config, position, tagName ->
            String orig = origDeserialize(config, position, tagName)
            if (orig.split('\\.').length < 3) {
                orig += ".0"
            }
            orig
        }
    }
}
project.version = scmVersion.version

repositories {
    mavenCentral()
}

configurations {
    pluginLibs

    implementation {
        compileClasspath.extendsFrom(pluginLibs)
    }
}

dependencies {
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.1'
    
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.14.4'

    implementation (
        'org.rundeck:rundeck-core:3.0.+',
    )
	
    testImplementation group: 'junit', name: 'junit', version:'4.12'

    testImplementation (
            'org.mockito:mockito-all:1.9.5',
            'org.powermock:powermock-module-junit4:1.5',
            'org.powermock:powermock-api-mockito:1.5'
    )
}

// task to copy plugin libs to output/lib dir
task copyToLib(type: Copy) {
    into "$buildDir/output/lib"
    from configurations.pluginLibs
}

jar {
    from "$buildDir/output"
    manifest {
        def libList = configurations.pluginLibs.collect{'lib/'+it.name}.join(' ')

        attributes 'Rundeck-Plugin-Classnames': pluginClassNames
        attributes 'Rundeck-Plugin-File-Version': archiveVersion
        attributes 'Rundeck-Plugin-Name': pluginName
        attributes 'Rundeck-Plugin-Description': pluginDescription
        attributes 'Rundeck-Plugin-Rundeck-Compatibility-Version': '3.x'
        attributes 'Rundeck-Plugin-Tags': 'java,WorkflowNodeStep'
        attributes 'Rundeck-Plugin-License': 'Apache 2.0'
        attributes 'Rundeck-Plugin-Source-Link': 'https://github.com/kdebisschop/rundeck-rancher-node-plugin'
        attributes 'Rundeck-Plugin-Target-Host-Compatibility': 'all'
        attributes 'Rundeck-Plugin-Version': rundeckPluginVersion
        attributes 'Rundeck-Plugin-Archive': 'true'
        attributes 'Rundeck-Plugin-Libs': "${libList}"

    }
    dependsOn(copyToLib)
}

wrapper {
    gradleVersion = '6.0.1'
}
