plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.10.3'
    id 'java'
    id 'jacoco'
    id "org.sonarqube" version "2.8"
}

sonarqube {
    properties {
        property "sonar.projectKey", "kdebisschop_rundeck-rancher-node-plugin"
        property "sonar.organization", "kdebisschop"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.login", "807fd8589d7244bd324b5fecdfca9614d8a40c8c"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileJava {
    options.release.set(8)
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

compileTestJava {
    options.release.set(8)
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

defaultTasks 'clean','test','jacocoTestReport','build'
ext.rundeckPluginVersion = '1.2'
ext.pluginClassNames='com.bioraft.rundeck.rancher.RancherNodeExecutorPlugin,' +
'com.bioraft.rundeck.rancher.RancherFileCopier,' +
'com.bioraft.rundeck.rancher.RancherResourceModelSourceFactory,' +
'com.bioraft.rundeck.rancher.RancherUpgradeService,' +
'com.bioraft.rundeck.rancher.RancherNewStack,' +
'com.bioraft.rundeck.rancher.RancherAddService,' +
'com.bioraft.rundeck.rancher.RancherManageService'
ext.pluginName = 'Rancher Node Plugins'
ext.pluginDescription = 'Interface with Rancher environments'

scmVersion {
    ignoreUncommittedChanges = true
    tag {
        // Ignore tags that begin with <prefix><versionSeparator>, include all tags
        // if prefix is empty.
        prefix = ''
        versionSeparator = ''

        // Append .0 to satisfy SemVer if the tag version is only X.Y
        def origDeserialize=deserialize
        deserialize = { config, position, tagName ->
            String orig = origDeserialize(config, position, tagName)
            if (orig.split('\\.').length < 3) {
                orig += ".0"
            }
            orig
        }
    }
}
project.version = scmVersion.version

repositories {
    mavenCentral()
}

configurations {
    pluginLibs

    implementation {
        compileClasspath.extendsFrom(pluginLibs)
    }
}

dependencies {
    implementation (
        'com.fasterxml.jackson.core:jackson-databind:2.10.1',
        'com.squareup.okhttp3:okhttp:3.14.9',
        'org.apache.logging.log4j:log4j-api:2.13.2',
        'org.apache.logging.log4j:log4j-core:2.13.2',
        'org.rundeck:rundeck-core:3.3.4-20201007',
        'org.rundeck:rundeck-storage-api:3.3.4-20201007',
    )
    testImplementation (
        'com.squareup.okhttp3:mockwebserver:3.11.0',
        'junit:junit:4.12',
        'org.mockito:mockito-core:3.+',
        'org.slf4j:slf4j-simple:1.7.30+',
    )
}

plugins.withType(JacocoPlugin) {
    tasks["test"].finalizedBy 'jacocoTestReport'
}

// task to copy plugin libs to output/lib dir
task copyToLib(type: Copy) {
    into "$buildDir/output/lib"
    from configurations.pluginLibs
}

jar {
    from "$buildDir/output"
    manifest {
        def libList = configurations.pluginLibs.collect{'lib/'+it.name}.join(' ')

        attributes 'Rundeck-Plugin-Classnames': pluginClassNames
        attributes 'Rundeck-Plugin-File-Version': archiveVersion
        attributes 'Rundeck-Plugin-Name': pluginName
        attributes 'Rundeck-Plugin-Description': pluginDescription
        attributes 'Rundeck-Plugin-Rundeck-Compatibility-Version': '3.x'
        attributes 'Rundeck-Plugin-Tags': 'java,WorkflowNodeStep'
        attributes 'Rundeck-Plugin-License': 'Apache 2.0'
        attributes 'Rundeck-Plugin-Source-Link': 'https://github.com/kdebisschop/rundeck-rancher-node-plugin'
        attributes 'Rundeck-Plugin-Target-Host-Compatibility': 'all'
        attributes 'Rundeck-Plugin-Version': rundeckPluginVersion
        attributes 'Rundeck-Plugin-Archive': 'true'
        attributes 'Rundeck-Plugin-Libs': "${libList}"

    }
    dependsOn(copyToLib)
}

wrapper {
    gradleVersion = '6.6.1'
}
